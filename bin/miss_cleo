#!/usr/bin/env ruby

require "miss_cleo"
require 'pry'

repo = Rugged::Repository.new '.'
lines_to_run = Set.new

def exclude_from_map?(file_name)
  # Let's add a configuration for ignored files
  file_name == "db/structure.sql"
end

repo.index.diff.each_patch do |patch|
  file = patch.delta.old_file[:path]

  patch.each_hunk do |hunk|
    hunk.each_line do |line|
      case line.line_origin
      when :addition
        lines_to_run << [file, line.new_lineno] unless exclude_from_map?(file)
      when :deletion
        lines_to_run << [file, line.old_lineno] unless exclude_from_map?(file)
      when :context
        # do nothing
      end
    end
  end
end

def diff before, after
  after.each_with_object({}) do |(file_name,line_cov), res|
    before_line_cov = before[file_name] || []

    # skip arrays that are exactly the same
    next if before_line_cov == line_cov

    # subtract the old coverage from the new coverage
    cov = line_cov.zip(before_line_cov).map do |line_after, line_before|
      if line_before
        line_after - line_before
      else
        line_after
      end
    end

    # add the "diffed" coverage to the hash
    res[file_name] = cov
  end
end

def get_cov_map_for(file_name)
  cov_map = Hash.new { |h, file| h[file] = Hash.new { |i, line| i[line] = [] } }

  if File.exists?(file_name)
    File.open(file_name, "r") do |f|
      content = f.read
      return if content.empty?
      # Read in the coverage info
      JSON.parse(content).each do |args|
        if args.length == 4 # for Minitest
          desc = args.first(2).join('#')
        else                # for RSpec
          desc = args.first
        end

        before, after = args.last(2)

        # calculate the per test coverage
        delta = diff before, after

        delta.each_pair do |file, lines|
          file_map = cov_map[file]

          lines.each_with_index do |val, i|
            # skip lines that weren't executed
            next unless val && val > 0

            # add the test name to the map. Multiple tests can execute the same
            # line, so we need to use an array.
            file_map[i + 1] << desc
          end
        end
      end
    end
  end
  cov_map
end

cuke_map = get_cov_map_for(MissCleo::TestConfigurations::CucumberConfig::CUCUMBER_MAP)
spec_map = get_cov_map_for(MissCleo::TestConfigurations::RspecConfig::RSPEC_MAP)

puts "You need to run"
lines_to_run.each do |file, line|
  spec_map && spec_map[File.expand_path(file)].fetch(line, []).uniq.each do |desc|
    puts desc
  end
  cuke_map && cuke_map[File.expand_path(file)].fetch(line, []).uniq.each do |desc|
    puts desc
  end
end
