#!/usr/bin/env ruby

require "miss_cleo"
require 'pry'

repo = Rugged::Repository.new '.'
lines_to_run = Set.new

def exclude_from_map?(file_name)
  # Let's add a configuration for ignored files
  file_name == "db/structure.sql"
end

repo.index.diff.each_patch do |patch|
  file = patch.delta.old_file[:path]

  patch.each_hunk do |hunk|
    hunk.each_line do |line|
      case line.line_origin
      when :addition
        lines_to_run << [file, line.new_lineno] unless exclude_from_map?(file)
      when :deletion
        lines_to_run << [file, line.old_lineno] unless exclude_from_map?(file)
      when :context
        # do nothing
      end
    end
  end
end

def diff before, after
  after.each_with_object({}) do |(file_name,line_cov), res|
    before_line_cov = before[file_name] || []

    # skip arrays that are exactly the same
    next if before_line_cov == line_cov

    # subtract the old coverage from the new coverage
    cov = line_cov.zip(before_line_cov).map do |line_after, line_before|
      if line_before
        line_after - line_before
      else
        line_after
      end
    end

    # add the "diffed" coverage to the hash
    res[file_name] = cov
  end
end

def build_coverage_map(cov_diffs)
  cov_map = Hash.new { |h, file| h[file] = Hash.new { |i, line| i[line] = [] } }
  cov_diffs.each do |args|
    if args.length == 4 # for Minitest
      desc = args.first(2).join('#')
    else                # for RSpec
      desc = args.first
    end

    before, after = args.last(2)

    # calculate the per test coverage
    delta = diff before, after

    delta.each_pair do |file, lines|
      file_map = cov_map[file]

      lines.each_with_index do |val, i|
        # skip lines that weren't executed
        next unless val && val > 0

        # add the test name to the map. Multiple tests can execute the same
        # line, so we need to use an array.
        file_map[i + 1] << desc
      end
    end
  end
  cov_map
end

case ARGV.first
when "build_deck"
  filenames = ARGV[1..-1]
  coverage_diffs = []
  filenames.each do |filename|
    File.open(filename, "r") do |f|
      f.read
    end.tap do |contents|
      coverage_diffs += JSON.parse(contents)
    end
  end

  coverage_map = build_coverage_map(coverage_diffs)

  File.open("total_coverage_map.json", "w") do |f|
    f.write(JSON.dump(coverage_map))
  end
when "predict"
  coverage_map = JSON.parse(File.open("total_coverage_map.json").read)
  puts "You need to run"
  tests_to_run = []
  lines_to_run.each do |file, line|
    coverage_map && coverage_map[File.expand_path(file)] && coverage_map[File.expand_path(file)].fetch(line.to_s, []).uniq.each do |desc|
      tests_to_run << desc
    end
  end
  puts tests_to_run.uniq.sort
end

